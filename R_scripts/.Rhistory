ungroup() %>%
mutate(site = as.numeric(SITE),
month =as.numeric(MONTH)) %>%
select(y, site, month) %>%
as.list()
str(dat_numeric)
attach(dat_numeric)
# Initial values
inits <- function (){
list (beta0 = rnorm(1), sigma.e=runif(1), sigma.site=runif(1),sigma.month=runif(1),
sigma.site.month=runif(1))
}
# Parameters monitored
parameters <- c("beta0","sigma.e","sigma.site", "sigma.month", "sigma.site.month",
"local.b","global.b","a")
# MCMC settings
ni <- 1000
nt <- 1
nb <- 50
nc <- 2
start.time = Sys.time()         # Set timer
# Call JAGS from R
out <- jags(dat_numeric, inits, parameters, "flathead.txt", n.chains = nc,
n.thin = nt, n.iter = ni, n.burnin = nb,  parallel=T)
sink("flathead.txt")
cat("
model {
# Likelihood:
# Level-1 of the model
for (i in 1:74){
y[i] <- beta0 + site[i] + month[i]
}
# Priors
beta0 ~ dnorm(0, 0.0001)
sigma.e ~ dunif(0, 1)
sigma.site ~ dunif(0,2)
sigma.month ~ dunif(0,1)
sigma.site.month ~ dunif(0,1)
# Derived quantities
tau <- pow(sigma.e,-2)
tau.site <- pow(sigma.site,-2)
tau.month <- pow(sigma.month,-2)
tau.site.month <- pow(sigma.site.month,-2)
} # end model
",fill = TRUE)
sink()
# Call JAGS from R
out <- jags(dat_numeric, inits, parameters, "flathead.txt", n.chains = nc,
n.thin = nt, n.iter = ni, n.burnin = nb,  parallel=T)
# Define the model in the BUGS language and write a text file
sink("flathead.txt")
cat("
model {
# Likelihood:
# Level-1 of the model
for (i in 1:74){
y[i] ~ dnorm(mu[i], tau)
mu[i] <- beta0 + site[i] + month[i]
}
# Priors
beta0 ~ dnorm(0, 0.0001)
sigma.e ~ dunif(0, 1)
sigma.site ~ dunif(0,2)
sigma.month ~ dunif(0,1)
sigma.site.month ~ dunif(0,1)
# Derived quantities
tau <- pow(sigma.e,-2)
tau.site <- pow(sigma.site,-2)
tau.month <- pow(sigma.month,-2)
tau.site.month <- pow(sigma.site.month,-2)
} # end model
",fill = TRUE)
sink()
# Read in data
dat <- read.csv("../cleaned_data/ppcp.csv", header = TRUE)
dat_numeric <- dat %>%
filter(!(SITE %in% c("FI2", "DU2", "HO1"))) %>%
group_by(SITE, MONTH) %>%
summarize(y = sum(CONCENTRATION, na.rm = TRUE)) %>%
ungroup() %>%
mutate(site = as.numeric(SITE),
month =as.numeric(MONTH)) %>%
select(y, site, month) %>%
as.list()
str(dat_numeric)
attach(dat_numeric)
# Initial values
inits <- function (){
list (beta0 = rnorm(1), sigma.e=runif(1), sigma.site=runif(1),sigma.month=runif(1),
sigma.site.month=runif(1))
}
# Parameters monitored
parameters <- c("beta0","sigma.e","sigma.site", "sigma.month", "sigma.site.month",
"local.b","global.b","a")
# MCMC settings
ni <- 1000
nt <- 1
nb <- 50
nc <- 2
start.time = Sys.time()         # Set timer
# Call JAGS from R
out <- jags(dat_numeric, inits, parameters, "flathead.txt", n.chains = nc,
n.thin = nt, n.iter = ni, n.burnin = nb,  parallel=T)
end.time = Sys.time()
elapsed.time = round(difftime(end.time, start.time, units='mins'), dig = 2)
cat('Posterior computed in ', elapsed.time, ' minutes\n\n', sep='')
# Summarize posteriors
print(out, dig = 3)
### Sometimes you have many, many parameters to examine:
# Find which parameters, if any, have Rhat > 1.1
which(out$summary[, c("Rhat")] > 1.1)
# Or see what max Rhat value is
max(out$summary[, c("Rhat")])
# outExp <- out$summary
# write.csv(outExp, "TP_ModelSummary.csv", row.names = T)
mcmcOut <- out$sims.list
saveRDS(mcmcOut, file="ppcp_mcmc_out.rds")
library(ggmcmc)
library(gridExtra)
library(ggthemes)
library(coda)
out.mcmc <- as.mcmc(out)
S <- ggs(out.mcmc$samples)
# ggs_traceplot(S)
ggmcmc(S, file = "TP_HORSE.pdf")
# ggs_traceplot(S)
ggmcmc(S, file = "../figures_tables.pdf")
# ggs_traceplot(S)
ggmcmc(S, file = "../figures_tables/mcmc_output.pdf")
# Define the model in the BUGS language and write a text file
sink("flathead.txt")
cat("
model {
# Likelihood:
# Level-1 of the model
for (i in 1:74){
y[i] ~ dnorm(mu[i], tau)
mu[i] <- beta0 + site[i] + month[i] + [site[i],month[i]]
}
# Priors
beta0 ~ dnorm(0, 0.0001)
sigma.e ~ dunif(0, 1)
sigma.site ~ dunif(0,2)
sigma.month ~ dunif(0,1)
sigma.site.month ~ dunif(0,1)
# Derived quantities
tau <- pow(sigma.e,-2)
tau.site <- pow(sigma.site,-2)
tau.month <- pow(sigma.month,-2)
tau.site.month <- pow(sigma.site.month,-2)
} # end model
",fill = TRUE)
sink()
# Read in data
dat <- read.csv("../cleaned_data/ppcp.csv", header = TRUE)
dat_numeric <- dat %>%
filter(!(SITE %in% c("FI2", "DU2", "HO1"))) %>%
group_by(SITE, MONTH) %>%
summarize(y = sum(CONCENTRATION, na.rm = TRUE)) %>%
ungroup() %>%
mutate(site = as.numeric(SITE),
month =as.numeric(MONTH)) %>%
select(y, site, month) %>%
as.list()
# Initial values
inits <- function (){
list (beta0 = rnorm(1), sigma.e=runif(1), sigma.site=runif(1),sigma.month=runif(1),
sigma.site.month=runif(1))
}
# Parameters monitored
parameters <- c("beta0","sigma.e","sigma.site", "sigma.month", "sigma.site.month",
"local.b","global.b","a")
# MCMC settings
ni <- 1000
nt <- 1
nb <- 50
nc <- 2
start.time = Sys.time()         # Set timer
# Call JAGS from R
out <- jags(dat_numeric, inits, parameters, "flathead.txt", n.chains = nc,
n.thin = nt, n.iter = ni, n.burnin = nb,  parallel=T)
dat_numeric <- dat %>%
filter(!(SITE %in% c("FI2", "DU2", "HO1"))) %>%
group_by(SITE, MONTH) %>%
summarize(y_raw = sum(CONCENTRATION, na.rm = TRUE)) %>%
ungroup() %>%
mutate(site = as.numeric(SITE),
month =as.numeric(MONTH),
y = scale(y_raw, center = TRUE, scale = TRUE)) %>%
select(y, site, month) %>%
as.list()
str(dat_numeric)
dat_numeric <- dat %>%
filter(!(SITE %in% c("FI2", "DU2", "HO1"))) %>%
group_by(SITE, MONTH) %>%
summarize(y_raw = sum(CONCENTRATION, na.rm = TRUE)) %>%
ungroup() %>%
mutate(site = as.numeric(SITE),
month =as.numeric(MONTH),
y = as.numeric(scale(y_raw, center = TRUE, scale = TRUE))) %>%
select(y, site, month) %>%
as.list()
str(dat_numeric)
attach(dat_numeric)
# Initial values
inits <- function (){
list (beta0 = rnorm(1), sigma.e=runif(1), sigma.site=runif(1),sigma.month=runif(1),
sigma.site.month=runif(1))
}
# Parameters monitored
parameters <- c("beta0","sigma.e","sigma.site", "sigma.month", "sigma.site.month",
"local.b","global.b","a")
# MCMC settings
ni <- 1000
nt <- 1
nb <- 50
nc <- 2
start.time = Sys.time()         # Set timer
# Call JAGS from R
out <- jags(dat_numeric, inits, parameters, "flathead.txt", n.chains = nc,
n.thin = nt, n.iter = ni, n.burnin = nb,  parallel=T)
# Define the model in the BUGS language and write a text file
sink("flathead.txt")
cat("
model {
# Likelihood:
# Level-1 of the model
for (i in 1:74){
y[i] ~ dnorm(mu[i], tau)
mu[i] <- beta0 + site[i] + month[i]
}
# Priors
beta0 ~ dnorm(0, 0.0001)
sigma.e ~ dunif(0, 1)
sigma.site ~ dunif(0,2)
sigma.month ~ dunif(0,1)
sigma.site.month ~ dunif(0,1)
# Derived quantities
tau <- pow(sigma.e,-2)
tau.site <- pow(sigma.site,-2)
tau.month <- pow(sigma.month,-2)
tau.site.month <- pow(sigma.site.month,-2)
} # end model
",fill = TRUE)
sink()
# Call JAGS from R
out <- jags(dat_numeric, inits, parameters, "flathead.txt", n.chains = nc,
n.thin = nt, n.iter = ni, n.burnin = nb,  parallel=T)
# MCMC settings
ni <- 10000
nt <- 1
nb <- 500
nc <- 2
# Call JAGS from R
out <- jags(dat_numeric, inits, parameters, "flathead.txt", n.chains = nc,
n.thin = nt, n.iter = ni, n.burnin = nb,  parallel=T)
end.time = Sys.time()
saveRDS(mcmcOut, file="ppcp_mcmc_out.rds")
out.mcmc <- as.mcmc(out)
S <- ggs(out.mcmc$samples)
# ggs_traceplot(S)
ggmcmc(S, file = "../figures_tables/mcmc_output.pdf")
# outExp <- out$summary
# write.csv(outExp, "TP_ModelSummary.csv", row.names = T)
mcmcOut <- out$sims.list
saveRDS(mcmcOut, file="../cleaned_data/ppcp_mcmc_out.rds")
out.mcmc <- as.mcmc(out)
S <- ggs(out.mcmc$samples)
# ggs_traceplot(S)
ggmcmc(S, file = "../figures_tables/mcmc_output.pdf")
# ggs_traceplot(S)
ggmcmc(S, file = "../figures_tables/mcmc_output.pdf")
mcmcOut
str(mcmcOut)
mcmc_df <- data.frame(mcmcOut)
str(mcmc_df)
mcmc_df %>%
gather(parameter, value, sigma.site:sigma.site.month) %>%
ggplot(aes(parameter, value)) +
geom_boxplot()
mcmc_df %>%
gather(parameter, value, sigma.site:sigma.site.month)
mcmc_df %>%
#gather(parameter, value, sigma.site:sigma.site.month) %>%
ggplot(aes(parameter, value, color = parameter)) +
geom_boxplot()
mcmc_df %>%
gather(parameter, value, sigma.site:sigma.site.month) %>%
ggplot(aes(parameter, value, color = parameter)) +
geom_boxplot()
mcmc_df %>%
gather(parameter, value, sigma.site:sigma.site.month) %>%
mutate(parameter = as.factor(parameter)) %>%
ggplot(aes(parameter, value)) +
geom_boxplot()
mcmc_df <- tibble(mcmcOut)
mcmc_df %>%
gather(parameter, value, sigma.site:sigma.site.month) %>%
mutate(parameter = as.factor(parameter)) %>%
ggplot(aes(parameter, value)) +
geom_boxplot()
mcmc_df
mcmc_df <- data.frame(mcmcOut)
mcmc_df
str(mcmc_df)
head(mcmc_df)
mcmc_df %>%
gather(parameter_est, value, sigma.site:sigma.site.month) %>%
mutate(parameter_est = as.factor(parameter_est)) %>%
ggplot(aes(parameter_est, value)) +
geom_boxplot()
test_plot <- mcmc_df %>%
gather(parameter_est, value, sigma.site:sigma.site.month) %>%
mutate(parameter_est = as.factor(parameter_est)) %>%
ggplot(aes(parameter_est, value)) +
geom_boxplot()
ggsave("../figures_tables/test_plot.png", test_plot)
test_plot <- mcmc_df %>%
gather(parameter_est, value, sigma.site:sigma.site.month) %>%
mutate(parameter_est = as.factor(parameter_est)) %>%
ggplot(aes(parameter_est, value)) +
geom_violin()
ggsave("../figures_tables/test_plot.png", test_plot)
test_df <- mcmc_df %>%
test_df <- mcmc_df %>%
gather(parameter_est, value, sigma.site:sigma.site.month) %>%
mutate(parameter_est = as.factor(parameter_est)
test_df <- mcmc_df %>%
gather(parameter_est, value, sigma.site:sigma.site.month) %>%
mutate(parameter_est = as.factor(parameter_est))
aov_results <- aov(value ~ parameter_est, data = test_df)
anova(aov_results)
test_plot <- mcmc_df %>%
gather(parameter_est, value, sigma.site:sigma.site.month) %>%
mutate(parameter_est = as.factor(parameter_est)) %>%
ggplot(aes(parameter_est, value)) +
geom_boxplot()
ggsave("../figures_tables/test_plot.png", test_plot)
# MCMC settings
ni <- 100000
nt <- 1
nb <- 5000
nc <- 2
start.time = Sys.time()         # Set timer
# Call JAGS from R
out <- jags(dat_numeric, inits, parameters, "flathead.txt", n.chains = nc,
n.thin = nt, n.iter = ni, n.burnin = nb,  parallel=T)
end.time = Sys.time()
elapsed.time = round(difftime(end.time, start.time, units='mins'), dig = 2)
cat('Posterior computed in ', elapsed.time, ' minutes\n\n', sep='')
### Sometimes you have many, many parameters to examine:
# Find which parameters, if any, have Rhat > 1.1
which(out$summary[, c("Rhat")] > 1.1)
# Or see what max Rhat value is
max(out$summary[, c("Rhat")])
# outExp <- out$summary
# write.csv(outExp, "TP_ModelSummary.csv", row.names = T)
mcmcOut <- out$sims.list
mcmc_df <- data.frame(mcmcOut)
test_plot <- mcmc_df %>%
gather(parameter_est, value, sigma.site:sigma.site.month) %>%
mutate(parameter_est = as.factor(parameter_est)) %>%
ggplot(aes(parameter_est, value)) +
geom_boxplot()
ggsave("../figures_tables/test_plot.png", test_plot)
head(mcmc_df)
test_plot <- mcmc_df %>%
gather(parameter_est, value, beta0:deviance) %>%
mutate(parameter_est = as.factor(parameter_est),
sigma_label = ifelse(parameter_est == "sigma.month", "temporal", NA),
sigma_label = ifelse(parameter_est == "sigma.site", "spatial", sigma_label),
sigma_label = ifelse(parameter_est == "sigma.site", "spatio-temporal", sigma_label)) %>%
ggplot(aes(parameter_est, value)) +
geom_boxplot() +
ylab("Sigma")
ggsave("../figures_tables/test_plot.png", test_plot)
test_plot <- mcmc_df %>%
gather(parameter_est, value, beta0:sigma.site.month) %>%
mutate(parameter_est = as.factor(parameter_est),
sigma_label = ifelse(parameter_est == "sigma.month", "temporal", NA),
sigma_label = ifelse(parameter_est == "sigma.site", "spatial", sigma_label),
sigma_label = ifelse(parameter_est == "sigma.site", "spatio-temporal", sigma_label)) %>%
ggplot(aes(parameter_est, value)) +
geom_boxplot() +
ylab("Sigma")
ggsave("../figures_tables/test_plot.png", test_plot)
test_plot <- mcmc_df %>%
gather(parameter_est, value, beta0:sigma.site.month) %>%
mutate(parameter_est = as.factor(parameter_est),
sigma_label = ifelse(parameter_est == "sigma.month", "temporal", NA),
sigma_label = ifelse(parameter_est == "sigma.site", "spatial", sigma_label),
sigma_label = ifelse(parameter_est == "sigma.site", "spatio-temporal", sigma_label),
sigma_label = ifelse(parameter_est == "sigma.e", "residual", sigma_label)) %>%
ggplot(aes(parameter_est, value)) +
geom_boxplot() +
ylab("Sigma")
ggsave("../figures_tables/test_plot.png", test_plot)
test_plot <- mcmc_df %>%
gather(parameter_est, value, sigma.e:sigma.site.month) %>%
mutate(parameter_est = as.factor(parameter_est),
sigma_label = ifelse(parameter_est == "sigma.month", "temporal", NA),
sigma_label = ifelse(parameter_est == "sigma.site", "spatial", sigma_label),
sigma_label = ifelse(parameter_est == "sigma.site", "spatio-temporal", sigma_label),
sigma_label = ifelse(parameter_est == "sigma.e", "residual", sigma_label)) %>%
ggplot(aes(sigma_label, value)) +
geom_boxplot() +
ylab("Sigma")
ggsave("../figures_tables/test_plot.png", test_plot)
test_plot <- mcmc_df %>%
gather(parameter_est, value, sigma.e:sigma.site.month) %>%
mutate(parameter_est = as.factor(parameter_est),
sigma_label = ifelse(parameter_est == "sigma.month", "temporal", NA),
sigma_label = ifelse(parameter_est == "sigma.site", "spatial", sigma_label),
sigma_label = ifelse(parameter_est == "sigma.site.month", "spatio-temporal", sigma_label),
sigma_label = ifelse(parameter_est == "sigma.e", "residual", sigma_label)) %>%
ggplot(aes(sigma_label, value)) +
geom_boxplot() +
ylab("Sigma")
ggsave("../figures_tables/test_plot.png", test_plot)
setwd("C:/Users/michael.f.meyer/Dropbox/Baikal_sewage/R_scripts_numbered")
invertebrates <- read.csv("../cleaned_data/invertebrates_20190320.csv", header = TRUE)
periphyton <- read.csv("../cleaned_data/periphyton_20190320.csv", header = TRUE)
metadata <- read.csv("../cleaned_data/metadata_20190320.csv", header = TRUE)
distance <- read.csv("../cleaned_data/distance_20190320.csv", header = TRUE)
metadata_dist <- full_join(metadata, distance)
ppcp <- read.csv("../cleaned_data/ppcp_20190320.csv", header = TRUE)
ppcp_meta_dist <- full_join(ppcp, metadata_dist) %>%
filter(!(Site %in% c("OS-1", "OS-2", "OS-3")))
low <- c("BGO-1", "BGO-2", "KD-1", "KD-2")
mod <- c("BGO-3", "BK-2", "BK-3", "MS-1")
high <- c("BK-1", "SM-1", "EM-1", "LI-3", "LI-2")
periphyton_meta_dist <- full_join(periphyton, ppcp_meta_dist) %>%
mutate(POPULATION_INTENSITY = (SOUTH_SHORE_DIST*(POP_SOUTH_DEV/SOUTH_SHORE_AREA))/SOUTH_DEV_DIST)
##Univariate Analysis
periphyton_meta_dist_long <- periphyton_meta_dist %>%
gather(Taxon, Count, desmidales:ulothrix) %>%
filter(!(Taxon %in% c("desmidales", "pediastrum"))) %>%
group_by(Site) %>%
mutate(Total_count = sum(Count))
periphyton_meta_dist_long$Site <- factor(periphyton_meta_dist_long$Site,
levels = c("BGO-3", "BGO-1", "BGO-2", "KD-1", "KD-2",
"MS-1", "BK-3", "BK-2", "BK-1", "SM-1", "EM-1",
"LI-3", "LI-2", "LI-1"))
periphyton_meta_dist_plot <- ggplot(periphyton_meta_dist_long[!is.na(periphyton_meta_dist_long$Site), ]) +
geom_bar(aes(Site, Total_count), fill = 'grey80', stat = "identity") +
geom_bar(aes(Site, Count, fill = Taxon), stat = "identity") +
scale_fill_viridis(discrete = TRUE, option = "inferno") +
facet_wrap(~ Taxon) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
ylab("Number of cells") +
xlab("Site (Arranged by increasing population intensity)") +
theme_classic() +
theme(legend.position = "none",
axis.text.x=element_text(angle = 45, hjust = 1)) +
theme(plot.title = element_text(size=20),
strip.text.x = element_text(size=27),
strip.background = element_rect(fill = "white"),
panel.background = element_rect(color = "black"),
axis.title = element_text(size = 30),
#axis.text.x = element_text("none"),
axis.text.y = element_text(size = 24),
axis.title.y=element_text(margin=margin(0,20,0,0)),
axis.title.x=element_text(size = 24, margin=margin(20,0,0,0)),
legend.text=element_text(size=16),
#axis.title.x=element_blank(),
#axis.text.x=element_blank(),
axis.ticks.x=element_blank())
library(viridis)
periphyton_meta_dist_plot <- ggplot(periphyton_meta_dist_long[!is.na(periphyton_meta_dist_long$Site), ]) +
geom_bar(aes(Site, Total_count), fill = 'grey80', stat = "identity") +
geom_bar(aes(Site, Count, fill = Taxon), stat = "identity") +
scale_fill_viridis(discrete = TRUE, option = "inferno") +
facet_wrap(~ Taxon) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
ylab("Number of cells") +
xlab("Site (Arranged by increasing population intensity)") +
theme_classic() +
theme(legend.position = "none",
axis.text.x=element_text(angle = 45, hjust = 1)) +
theme(plot.title = element_text(size=20),
strip.text.x = element_text(size=27),
strip.background = element_rect(fill = "white"),
panel.background = element_rect(color = "black"),
axis.title = element_text(size = 30),
#axis.text.x = element_text("none"),
axis.text.y = element_text(size = 24),
axis.title.y=element_text(margin=margin(0,20,0,0)),
axis.title.x=element_text(size = 24, margin=margin(20,0,0,0)),
legend.text=element_text(size=16),
#axis.title.x=element_blank(),
#axis.text.x=element_blank(),
axis.ticks.x=element_blank())
periphyton_meta_dist_wide <- periphyton_meta_dist %>%
filter(!(Site %in% c("OS-1", "OS-2", "OS-3"))) %>%
mutate(PI_group = ifelse(Site %in% high, "High", "NULL"),
PI_group = ifelse((Site %in% mod) | (Site %in% low), "Mod/Low", PI_group)) %>%
select(-desmidales, -pediastrum) %>%
as.data.frame()
test_plot <- mcmc_df %>%
gather(parameter_est, value, sigma.e:sigma.site.month) %>%
mutate(parameter_est = as.factor(parameter_est),
sigma_label = ifelse(parameter_est == "sigma.month", "temporal", NA),
sigma_label = ifelse(parameter_est == "sigma.site", "spatial", sigma_label),
sigma_label = ifelse(parameter_est == "sigma.site.month", "spatio-temporal", sigma_label),
sigma_label = ifelse(parameter_est == "sigma.e", "residual", sigma_label)) %>%
ggplot(aes(sigma_label, value)) +
geom_boxplot() +
ylab("Sigma")
test_plot
setwd("C:/Users/michael.f.meyer/Dropbox/flathead_sewage/R_scripts")
